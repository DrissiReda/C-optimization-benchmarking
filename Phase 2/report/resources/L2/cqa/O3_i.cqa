Section 1: Function: baseline
=============================

These loops are supposed to be defined in: /root/Desktop/IATIC4/AOA/projet-td/subject10.c

Section 1.1: Source loop ending at line 7
=========================================

Composition and unrolling
-------------------------
It is composed of the following loops [ID (first-last source line)]:
 - 1 (6-7)
 - 2 (6-7)
 - 3 (6-7)
and is unrolled by 8 (including vectorization).

The following loops are considered as:
 - unrolled and/or vectorized main: 2
 - peel or tail: 1, 3
The analysis will be displayed for the unrolled and/or vectorized loops: 2

Section 1.1.1: Binary (unrolled and/or vectorized) loop #2
==========================================================

The loop is defined in /root/Desktop/IATIC4/AOA/projet-td/subject10.c:6-7
In the binary file, the address of the loop is: 400e42

12% of peak computational performance is used (2.00 out of 16.00 FLOP per cycle (GFLOPS @ 1GHz))

Vectorization status
--------------------
Your loop is vectorized (all SSE/AVX instructions are used in vector version (process two or more data elements in vector registers)), but using only 128 out of 256 bits (SSE/AVX-128 instructions on AVX/AVX2 processors).


Vectorization
-------------
Your loop is PARTIALLY VECTORIZED and could benefit from full vectorization.
By fully vectorizing your loop, you can lower the cost of an iteration from 4.00 to 2.00 cycles (2.00x speedup).
Since your execution units are vector units, only a fully vectorized loop can use their full power.

Workaround(s):
 - Found micro-architecture specialization compiler flags: 3:
  * Check match with analysis target. Ex: for Haswell, you should compile with -xCORE-AVX2 or, on a Haswell machine, with -xHost
 - Use vector aligned instructions:
  1) align your arrays on 32 bytes boundaries
  2) inform your compiler that your arrays are vector aligned: use the VECTOR ALIGNED directive.
 - Use the LOOP COUNT directive


Bottlenecks
-----------
Detected a non usual bottleneck.

Workaround(s):
Found micro-architecture specialization compiler flags: 3:
 - Check match with analysis target. Ex: for Haswell, you should compile with -xCORE-AVX2 or, on a Haswell machine, with -xHost



All innermost loops were analyzed.

