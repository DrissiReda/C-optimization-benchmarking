Section 1: Function: baseline
=============================

These loops are supposed to be defined in: /root/Desktop/IATIC4/AOA/projet-td/subject10.c

Section 1.1: Source loop ending at line 7
=========================================

Composition and unrolling
-------------------------
It is composed of the loop 8
and is not unrolled or unrolled with no peel/tail loop.

Section 1.1.1: Binary loop #8
=============================

The loop is defined in /root/Desktop/IATIC4/AOA/projet-td/subject10.c:6-7
In the binary file, the address of the loop is: 16fa

0% of peak computational performance is used (0.10 out of 16.00 FLOP per cycle (GFLOPS @ 1GHz))

Vectorization status
--------------------
Your loop is not vectorized (all SSE/AVX instructions are used in scalar version (process only one data element in vector registers)).
Only 20% of vector register length is used (average across all SSE/AVX instructions).


Vectorization
-------------
Your loop is NOT VECTORIZED and could benefit from vectorization.
By vectorizing your loop, you can lower the cost of an iteration from 84.00 to 15.30 cycles (5.49x speedup).
Since your execution units are vector units, only a vectorized loop can use their full power.

Workaround(s):
 - Try another compiler or update/tune your current one:
  * if not already done, recompile with O3 to enable the compiler vectorizer. In case of reduction loop, use Ofast instead of O3 or add ffast-math.
 - Remove inter-iterations dependences from your loop and make it unit-stride:
  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:
C storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)
  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):
for(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)


Bottlenecks
-----------
Detected a non usual bottleneck.

Workaround(s):
Found micro-architecture specialization compiler flags: -march=skylake:
 - Check match with analysis target. Ex: for Haswell, you should compile with -march=haswell or, on a Haswell machine, with -march=native



All innermost loops were analyzed.

